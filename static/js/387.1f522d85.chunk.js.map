{"version":3,"file":"static/js/387.1f522d85.chunk.js","mappings":"4HAAe,SAASA,EAAkBC,GAEtC,MAMMC,GAPND,EAAO,IAAIE,KAAKF,IAOCG,UACXC,EAPa,CACf,UAAW,WAAY,QAAS,QAAS,MAAO,OAChD,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKjCJ,EAAKK,YACxBC,EAAON,EAAKO,cAElB,MAAM,GAANC,OAAUP,EAAG,KAAAO,OAAIJ,EAAK,MAAAI,OAAKF,EAC/B,C,aCVA,MA+BA,EA/BqBG,IAAiB,IAAhB,OAAEC,GAAQD,EAC5B,OACIE,EAAAA,EAAAA,MAAA,SAAOC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,YAAWC,UACxBF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,sCAAqCC,SAAA,EAC/CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gCAA+BC,SAAC,cAC9CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,2BAA0BC,SAAC,UACzCC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,2BAA0BC,SAAC,WACzCC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,2BAA0BC,SAAC,YACzCC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,mCAGtBE,EAAAA,EAAAA,KAAA,SAAAD,SAEQH,EAAOK,KAAKC,IACRL,EAAAA,EAAAA,MAAA,MAAoBC,UAAU,gBAAeC,SAAA,EACzCF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,oBAAmBC,SAAA,CAAC,IAAEG,EAAMC,QAC1CH,EAAAA,EAAAA,KAAA,MAAIF,UAAU,eAAcC,SAAEd,EAAkBiB,EAAME,cACtDP,EAAAA,EAAAA,MAAA,MAAIC,UAAU,eAAcC,SAAA,EAACF,EAAAA,EAAAA,MAAA,QAAMC,UAAU,cAAaC,SAAA,CAAC,IAAEG,EAAMG,YAAYC,QAAQ,MAAU,KAAGJ,EAAMK,YAAYC,OAAO,iBAC7HR,EAAAA,EAAAA,KAAA,MAAIF,UAAU,0BAAyBC,SAAEG,EAAMO,eAC/CT,EAAAA,EAAAA,KAAA,MAAIF,UAAU,cAAaC,UACvBC,EAAAA,EAAAA,KAAA,KAAGU,KAAI,iCAAAhB,OAAmCQ,EAAMC,KAAOL,UAAU,6BAA4BC,SAAC,qBAN7FG,EAAMC,WAYvB,C,wHCvBhB,MAkEA,EAlE4BQ,KACxB,MAAM,WAAEC,IAAeC,EAAAA,EAAAA,YAAWC,EAAAA,IAG3BlB,EAAQmB,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,OAG5BK,EAAaC,IAAkBN,EAAAA,EAAAA,UAAS,IAExCO,EAAiBC,IAAsBR,EAAAA,EAAAA,UAAS,KAEvDS,EAAAA,EAAAA,YAAU,KACUC,WACZ,IAEI,MAAMC,QAAeC,EAAAA,EAAAA,GAAU,qBAC/Bb,EAAUY,GACVH,GAAmB,IAAMG,EAAOE,MAAM,EAT7B,KAUTX,GAAW,EACf,CAAE,MAAOC,GACLC,EAASD,GACTD,GAAW,EACf,GAGJY,EAAS,GACV,IAkBH,OAJAL,EAAAA,EAAAA,YAAU,KACNb,EAAW,CAAC,CAAEmB,MAAO,UAAWC,QAAS,mBAAqB,CAAED,MAAO,gBAAiBC,QAAS,KAAM,GACxG,CAACpB,IAEAK,GAAgBjB,EAAAA,EAAAA,KAACiC,EAAAA,EAAO,IAExBd,GAActB,EAAAA,EAAAA,MAAA,KAAGC,UAAU,wDAAuDC,SAAA,CAAC,UAAQoB,EAAMe,YAGjGrC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mFAAkFC,SAAA,EAC7FC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,6CAA4CC,SAAC,mBAI1DC,EAAAA,EAAAA,KAACmC,EAAAA,EAAY,CAACvC,OAAQ2B,KAGtBvB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wCAAuCC,UAClDC,EAAAA,EAAAA,KAACoC,EAAAA,EAAU,CAACf,YAAaA,EAAagB,WAAYC,KAAKC,KAAK3C,EAAOY,OAlD1D,GAkDkFgC,aA7B7EC,IAEtBC,QAAQC,IAAI,aACZ,MAAMC,EAxBW,GAwBGH,EAAO,GACrBI,EAAWP,KAAKQ,IAAIF,EAzBT,EAyBoChD,EAAOY,QAE5Dc,EAAemB,GACfjB,EAAmB5B,EAAOiC,MAAMe,EAAYC,GAAU,EAsB6EE,WAAY,QAEzI,C","sources":["utils/useGetFormatedDate.js","Pages/UserDashboardPages/UserOrdersHistoryPage/OrderHistory.js","Pages/UserDashboardPages/UserOrdersHistoryPage/UserOrdersHistories.js"],"sourcesContent":["export default function formattedDateName(date) {\r\n    date = new Date(date);\r\n    const monthNames = [\r\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n    ];\r\n    \r\n    // Extract the day, month, and year from the Date object\r\n    const day = date.getDate();\r\n    const month = monthNames[date.getMonth()]; // getMonth() returns 0-based index\r\n    const year = date.getFullYear();\r\n\r\n    return `${day} ${month}, ${year}`;\r\n}","import React from 'react';\r\nimport formattedDateName from '../../../utils/useGetFormatedDate';\r\n\r\nconst OrderHistory = ({ orders }) => {\r\n    return (\r\n        <table className='w-full mb-8'>\r\n            <thead className='text-left'>\r\n                <tr className='uppercase bg-gray-100 text-gray-700'>\r\n                    <th className='text-xs font-normal py-3 pl-4'>Order ID</th>\r\n                    <th className='text-xs font-normal py-3'>Date</th>\r\n                    <th className='text-xs font-normal py-3'>Total</th>\r\n                    <th className='text-xs font-normal py-3'>Status</th>\r\n                    <th className='text-xs font-normal py-3'></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    orders.map((order) => (\r\n                        <tr key={order._id} className='text-gray-800'>\r\n                            <td className='text-sm py-3 pl-4'>#{order._id}</td>\r\n                            <td className='text-sm py-3'>{formattedDateName(order.orderDate)}</td>\r\n                            <td className='text-sm py-3'><span className='font-medium'>${order.totalAmount.toFixed(2)}</span> ({order.productList.length} Products)</td>\r\n                            <td className='text-sm py-3 capitalize'>{order.orderStatus}</td>\r\n                            <td className='text-center'>\r\n                                <a href={`/user/dashboard/order-history/${order._id}`} className='text-[#00B207] font-medium'>View Details</a>\r\n                            </td>\r\n                        </tr>\r\n                    ))\r\n                }\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default OrderHistory;","import React, { useContext, useEffect, useState } from 'react';\r\nimport Pagination from '../../../Shared/Pagination/Pagination ';\r\nimport OrderHistory from './OrderHistory';\r\nimport { PageNavContext } from '../../../Provider/PageNavProvider';\r\nimport fetchData from '../../../utils/fetchData';\r\nimport Spinner from '../../../Shared/Spinner/Spinner';\r\n\r\nconst UserOrdersHistories = () => {\r\n    const { setPageNav } = useContext(PageNavContext);\r\n\r\n    // fetch data\r\n    const [orders, setOrders] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    // pagination part\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const itemsPerPage = 4;\r\n    const [currentPageData, setCurrentPageData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            try {\r\n                // const result = await fetchData('http://localhost:3000/fakeOrders.json');\r\n                const result = await fetchData('./fakeOrders.json');\r\n                setOrders(result);\r\n                setCurrentPageData(() => result.slice(0, itemsPerPage));\r\n                setLoading(false);\r\n            } catch (error) {\r\n                setError(error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        getData();\r\n    }, []);\r\n\r\n    // Function to handle page change\r\n    const handlePageChange = (page) => {\r\n        // Calculate the index range for current page\r\n        console.log(\"re-render\");\r\n        const startIndex = (page - 1) * itemsPerPage;\r\n        const endIndex = Math.min(startIndex + itemsPerPage, orders.length);\r\n\r\n        setCurrentPage(page);\r\n        setCurrentPageData(orders.slice(startIndex, endIndex))\r\n    };\r\n\r\n    // for page navigation\r\n    useEffect(() => {\r\n        setPageNav([{ title: \"account\", navLink: \"/user/dashboard\" }, { title: \"order history\", navLink: \"\" }]);\r\n    }, [setPageNav]);\r\n\r\n    if (loading) return <Spinner></Spinner>\r\n\r\n    if (error) return <p className='text-center h-[40vh] text-red-400 font-medium text-lg'>Error: {error.message}</p>;\r\n\r\n    return (\r\n        <div className='w-full min-h-full relative border-solid border-2 border-gray-100 rounded-md mb-6'>\r\n            <p className='m-4 mb-6 text-xl font-medium text-gray-900'>\r\n                Order History\r\n            </p>\r\n            {/* order history */}\r\n            <OrderHistory orders={currentPageData}></OrderHistory>\r\n\r\n            {/* Pagination */}\r\n            <div className='absolute bottom-0 left-0 right-0 mb-4'>\r\n                <Pagination currentPage={currentPage} totalPages={Math.ceil(orders.length / itemsPerPage)} onPageChange={handlePageChange} PAGE_RANGE={2} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserOrdersHistories;"],"names":["formattedDateName","date","day","Date","getDate","month","getMonth","year","getFullYear","concat","_ref","orders","_jsxs","className","children","_jsx","map","order","_id","orderDate","totalAmount","toFixed","productList","length","orderStatus","href","UserOrdersHistories","setPageNav","useContext","PageNavContext","setOrders","useState","loading","setLoading","error","setError","currentPage","setCurrentPage","currentPageData","setCurrentPageData","useEffect","async","result","fetchData","slice","getData","title","navLink","Spinner","message","OrderHistory","Pagination","totalPages","Math","ceil","onPageChange","page","console","log","startIndex","endIndex","min","PAGE_RANGE"],"sourceRoot":""}